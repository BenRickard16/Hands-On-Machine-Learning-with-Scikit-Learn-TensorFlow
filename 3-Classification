{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7c6e54e2",
   "metadata": {
    "papermill": {
     "duration": 0.008816,
     "end_time": "2024-10-26T21:28:25.732439",
     "exception": false,
     "start_time": "2024-10-26T21:28:25.723623",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# MNIST Handwriting Classification\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6dc6b6b2",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-10-26T21:28:25.750057Z",
     "iopub.status.busy": "2024-10-26T21:28:25.749563Z",
     "iopub.status.idle": "2024-10-26T21:29:15.548941Z",
     "shell.execute_reply": "2024-10-26T21:29:15.547473Z"
    },
    "papermill": {
     "duration": 49.811635,
     "end_time": "2024-10-26T21:29:15.551999",
     "exception": false,
     "start_time": "2024-10-26T21:28:25.740364",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/datasets/_openml.py:968: FutureWarning: The default value of `parser` will change from `'liac-arff'` to `'auto'` in 1.4. You can set `parser='auto'` to silence this warning. Therefore, an `ImportError` will be raised from 1.4 if the dataset is dense and pandas is not installed. Note that the pandas parser may return different data types. See the Notes Section in fetch_openml's API doc for details.\n",
      "  warn(\n"
     ]
    }
   ],
   "source": [
    "# Downloading the MNIST dataset\n",
    "from sklearn.datasets import fetch_openml\n",
    "mnist = fetch_openml('mnist_784', as_frame=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0c9bc5f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:29:15.570697Z",
     "iopub.status.busy": "2024-10-26T21:29:15.570125Z",
     "iopub.status.idle": "2024-10-26T21:29:15.578718Z",
     "shell.execute_reply": "2024-10-26T21:29:15.577542Z"
    },
    "papermill": {
     "duration": 0.02107,
     "end_time": "2024-10-26T21:29:15.581373",
     "exception": false,
     "start_time": "2024-10-26T21:29:15.560303",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['data', 'target', 'frame', 'categories', 'feature_names', 'target_names', 'DESCR', 'details', 'url'])"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mnist.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a69de328",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:29:15.599637Z",
     "iopub.status.busy": "2024-10-26T21:29:15.599200Z",
     "iopub.status.idle": "2024-10-26T21:29:15.605810Z",
     "shell.execute_reply": "2024-10-26T21:29:15.604496Z"
    },
    "papermill": {
     "duration": 0.018579,
     "end_time": "2024-10-26T21:29:15.608144",
     "exception": false,
     "start_time": "2024-10-26T21:29:15.589565",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(70000, 784) (70000,)\n"
     ]
    }
   ],
   "source": [
    "X, y = mnist['data'], mnist['target']\n",
    "print(X.shape, y.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec00eb65",
   "metadata": {
    "papermill": {
     "duration": 0.007946,
     "end_time": "2024-10-26T21:29:15.624272",
     "exception": false,
     "start_time": "2024-10-26T21:29:15.616326",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "There are 70,000 images with 784 features (28x28 pixels)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "25a96dfd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:29:15.642489Z",
     "iopub.status.busy": "2024-10-26T21:29:15.642094Z",
     "iopub.status.idle": "2024-10-26T21:29:15.757366Z",
     "shell.execute_reply": "2024-10-26T21:29:15.756221Z"
    },
    "papermill": {
     "duration": 0.127754,
     "end_time": "2024-10-26T21:29:15.760263",
     "exception": false,
     "start_time": "2024-10-26T21:29:15.632509",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'3'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Viewing one of the images\n",
    "%matplotlib inline\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "some_digit=X[30000]\n",
    "some_digit_image = some_digit.reshape(28, 28)\n",
    "plt.imshow(some_digit_image, cmap=matplotlib.cm.binary, interpolation='nearest')\n",
    "plt.axis('off')\n",
    "plt.show()\n",
    "\n",
    "y[30000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9adef7bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:29:15.780806Z",
     "iopub.status.busy": "2024-10-26T21:29:15.780346Z",
     "iopub.status.idle": "2024-10-26T21:29:15.785877Z",
     "shell.execute_reply": "2024-10-26T21:29:15.784744Z"
    },
    "papermill": {
     "duration": 0.018497,
     "end_time": "2024-10-26T21:29:15.788541",
     "exception": false,
     "start_time": "2024-10-26T21:29:15.770044",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# The dataset is already split into train and test as first 60,000 for train and the rest for test\n",
    "X_train, X_test, y_train, y_test = X[:60000], X[60000:], y[:60000], y[60000:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9bde11bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:29:15.808591Z",
     "iopub.status.busy": "2024-10-26T21:29:15.807388Z",
     "iopub.status.idle": "2024-10-26T21:29:16.426117Z",
     "shell.execute_reply": "2024-10-26T21:29:16.424912Z"
    },
    "papermill": {
     "duration": 0.631774,
     "end_time": "2024-10-26T21:29:16.428912",
     "exception": false,
     "start_time": "2024-10-26T21:29:15.797138",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# We shuffle the train set so we get a spread of digits\n",
    "import numpy as np\n",
    "\n",
    "shuffle_index = np.random.permutation(60000)\n",
    "X_train, y_train = X_train[shuffle_index], y_train[shuffle_index]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "993aab03",
   "metadata": {
    "papermill": {
     "duration": 0.008114,
     "end_time": "2024-10-26T21:29:16.445619",
     "exception": false,
     "start_time": "2024-10-26T21:29:16.437505",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Training a Binary Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f77c515d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:29:16.464481Z",
     "iopub.status.busy": "2024-10-26T21:29:16.464036Z",
     "iopub.status.idle": "2024-10-26T21:29:16.473607Z",
     "shell.execute_reply": "2024-10-26T21:29:16.472455Z"
    },
    "papermill": {
     "duration": 0.021899,
     "end_time": "2024-10-26T21:29:16.476076",
     "exception": false,
     "start_time": "2024-10-26T21:29:16.454177",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Testing for 5 or not 5\n",
    "y_train_5 = (y_train == '5')\n",
    "y_test_5 = (y_test == '5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ce1dfa11",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:29:16.495347Z",
     "iopub.status.busy": "2024-10-26T21:29:16.494918Z",
     "iopub.status.idle": "2024-10-26T21:29:36.356129Z",
     "shell.execute_reply": "2024-10-26T21:29:36.354976Z"
    },
    "papermill": {
     "duration": 19.873796,
     "end_time": "2024-10-26T21:29:36.358622",
     "exception": false,
     "start_time": "2024-10-26T21:29:16.484826",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SGDClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SGDClassifier</label><div class=\"sk-toggleable__content\"><pre>SGDClassifier(random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "SGDClassifier(random_state=42)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Use a Stochastic Gradient Descent classifier and train on the whole training set\n",
    "from sklearn.linear_model import SGDClassifier\n",
    "\n",
    "sgd_clf = SGDClassifier(random_state=42)\n",
    "sgd_clf.fit(X_train, y_train_5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bf9ac7c6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:29:36.378627Z",
     "iopub.status.busy": "2024-10-26T21:29:36.378164Z",
     "iopub.status.idle": "2024-10-26T21:29:36.387182Z",
     "shell.execute_reply": "2024-10-26T21:29:36.386005Z"
    },
    "papermill": {
     "duration": 0.021806,
     "end_time": "2024-10-26T21:29:36.389684",
     "exception": false,
     "start_time": "2024-10-26T21:29:36.367878",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([False])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sgd_clf.predict([some_digit])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f972ca36",
   "metadata": {
    "papermill": {
     "duration": 0.008684,
     "end_time": "2024-10-26T21:29:36.407286",
     "exception": false,
     "start_time": "2024-10-26T21:29:36.398602",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Performance Measures"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "054775ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:29:36.427193Z",
     "iopub.status.busy": "2024-10-26T21:29:36.426760Z",
     "iopub.status.idle": "2024-10-26T21:30:07.366574Z",
     "shell.execute_reply": "2024-10-26T21:30:07.365160Z"
    },
    "papermill": {
     "duration": 30.97239,
     "end_time": "2024-10-26T21:30:07.388790",
     "exception": false,
     "start_time": "2024-10-26T21:29:36.416400",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.95565, 0.9503 , 0.95535])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Evaluate the SGD Classifier with K-fold CV with 3 folds\n",
    "from sklearn.model_selection import cross_val_score\n",
    "cross_val_score(sgd_clf, X_train, y_train_5, cv=3, scoring='accuracy')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c0e887a",
   "metadata": {
    "papermill": {
     "duration": 0.018265,
     "end_time": "2024-10-26T21:30:07.425509",
     "exception": false,
     "start_time": "2024-10-26T21:30:07.407244",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "95% seems good accuracy, but lets check a dumb classifier which assigns every image as 'not 5'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "313618ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:30:07.465396Z",
     "iopub.status.busy": "2024-10-26T21:30:07.464610Z",
     "iopub.status.idle": "2024-10-26T21:30:07.475007Z",
     "shell.execute_reply": "2024-10-26T21:30:07.473449Z"
    },
    "papermill": {
     "duration": 0.033033,
     "end_time": "2024-10-26T21:30:07.477287",
     "exception": false,
     "start_time": "2024-10-26T21:30:07.444254",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Dumb classifier model\n",
    "from sklearn.base import BaseEstimator\n",
    "\n",
    "class Never5Classifier(BaseEstimator):\n",
    "    def fit(self, X, y=None):\n",
    "        pass\n",
    "    def predict(self, X):\n",
    "        return np.zeros((len(X), 1), dtype=bool)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b8c2fcd9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:30:07.497635Z",
     "iopub.status.busy": "2024-10-26T21:30:07.496794Z",
     "iopub.status.idle": "2024-10-26T21:30:07.862601Z",
     "shell.execute_reply": "2024-10-26T21:30:07.861487Z"
    },
    "papermill": {
     "duration": 0.379035,
     "end_time": "2024-10-26T21:30:07.865381",
     "exception": false,
     "start_time": "2024-10-26T21:30:07.486346",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.9072 , 0.91355, 0.9082 ])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Testing the model's accuracy\n",
    "never_5_clf = Never5Classifier()\n",
    "cross_val_score(never_5_clf, X_train, y_train_5, cv=3, scoring='accuracy')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "993a6632",
   "metadata": {
    "papermill": {
     "duration": 0.008929,
     "end_time": "2024-10-26T21:30:07.883850",
     "exception": false,
     "start_time": "2024-10-26T21:30:07.874921",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Gives 90% accuracy as only about 10% of the images are '5's"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8fb9247b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:30:07.904083Z",
     "iopub.status.busy": "2024-10-26T21:30:07.903621Z",
     "iopub.status.idle": "2024-10-26T21:30:38.987806Z",
     "shell.execute_reply": "2024-10-26T21:30:38.985816Z"
    },
    "papermill": {
     "duration": 31.098179,
     "end_time": "2024-10-26T21:30:38.991241",
     "exception": false,
     "start_time": "2024-10-26T21:30:07.893062",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# cross_val_predict returns the predictions made on each test fold\n",
    "from sklearn.model_selection import cross_val_predict\n",
    "\n",
    "y_train_pred = cross_val_predict(sgd_clf, X_train, y_train_5, cv=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "8072c3b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:30:39.034363Z",
     "iopub.status.busy": "2024-10-26T21:30:39.033574Z",
     "iopub.status.idle": "2024-10-26T21:30:39.067111Z",
     "shell.execute_reply": "2024-10-26T21:30:39.065833Z"
    },
    "papermill": {
     "duration": 0.061162,
     "end_time": "2024-10-26T21:30:39.071326",
     "exception": false,
     "start_time": "2024-10-26T21:30:39.010164",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[52509,  2070],\n",
       "       [  704,  4717]])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Now we can produce a confusion matrix\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "confusion_matrix(y_train_5, y_train_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34feb637",
   "metadata": {
    "papermill": {
     "duration": 0.015143,
     "end_time": "2024-10-26T21:30:39.105978",
     "exception": false,
     "start_time": "2024-10-26T21:30:39.090835",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Non-5 on the top row, so 54237 correctly identified as not 5, and 3682 correctly idenitified as 5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7cee8bc",
   "metadata": {
    "papermill": {
     "duration": 0.009621,
     "end_time": "2024-10-26T21:30:39.125304",
     "exception": false,
     "start_time": "2024-10-26T21:30:39.115683",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Precision and Recall**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "50b44db4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:30:39.146353Z",
     "iopub.status.busy": "2024-10-26T21:30:39.145916Z",
     "iopub.status.idle": "2024-10-26T21:30:39.179325Z",
     "shell.execute_reply": "2024-10-26T21:30:39.178069Z"
    },
    "papermill": {
     "duration": 0.047592,
     "end_time": "2024-10-26T21:30:39.182488",
     "exception": false,
     "start_time": "2024-10-26T21:30:39.134896",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6950051569176366"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculating the precision and recall\n",
    "from sklearn.metrics import precision_score, recall_score\n",
    "\n",
    "precision_score(y_train_5, y_train_pred)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b7188fa9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:30:39.203716Z",
     "iopub.status.busy": "2024-10-26T21:30:39.203250Z",
     "iopub.status.idle": "2024-10-26T21:30:39.233600Z",
     "shell.execute_reply": "2024-10-26T21:30:39.232115Z"
    },
    "papermill": {
     "duration": 0.044324,
     "end_time": "2024-10-26T21:30:39.236515",
     "exception": false,
     "start_time": "2024-10-26T21:30:39.192191",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8701346615015679"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "recall_score(y_train_5, y_train_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6798fd5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:30:39.258737Z",
     "iopub.status.busy": "2024-10-26T21:30:39.257788Z",
     "iopub.status.idle": "2024-10-26T21:30:39.288885Z",
     "shell.execute_reply": "2024-10-26T21:30:39.287468Z"
    },
    "papermill": {
     "duration": 0.04545,
     "end_time": "2024-10-26T21:30:39.291743",
     "exception": false,
     "start_time": "2024-10-26T21:30:39.246293",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7727719528178243"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Compute the F_1 score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_score(y_train_5, y_train_pred)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 30775,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 137.340878,
   "end_time": "2024-10-26T21:30:39.926002",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-10-26T21:28:22.585124",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
