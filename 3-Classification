{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "63083d73",
   "metadata": {
    "papermill": {
     "duration": 0.006959,
     "end_time": "2024-10-26T21:22:46.952723",
     "exception": false,
     "start_time": "2024-10-26T21:22:46.945764",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# MNIST Handwriting Classification\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "03137406",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-10-26T21:22:46.966959Z",
     "iopub.status.busy": "2024-10-26T21:22:46.966572Z",
     "iopub.status.idle": "2024-10-26T21:23:29.785498Z",
     "shell.execute_reply": "2024-10-26T21:23:29.784655Z"
    },
    "papermill": {
     "duration": 42.828819,
     "end_time": "2024-10-26T21:23:29.787947",
     "exception": false,
     "start_time": "2024-10-26T21:22:46.959128",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/datasets/_openml.py:968: FutureWarning: The default value of `parser` will change from `'liac-arff'` to `'auto'` in 1.4. You can set `parser='auto'` to silence this warning. Therefore, an `ImportError` will be raised from 1.4 if the dataset is dense and pandas is not installed. Note that the pandas parser may return different data types. See the Notes Section in fetch_openml's API doc for details.\n",
      "  warn(\n"
     ]
    }
   ],
   "source": [
    "# Downloading the MNIST dataset\n",
    "from sklearn.datasets import fetch_openml\n",
    "mnist = fetch_openml('mnist_784', as_frame=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "72dfcf00",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:23:29.803217Z",
     "iopub.status.busy": "2024-10-26T21:23:29.802507Z",
     "iopub.status.idle": "2024-10-26T21:23:29.809506Z",
     "shell.execute_reply": "2024-10-26T21:23:29.808552Z"
    },
    "papermill": {
     "duration": 0.016468,
     "end_time": "2024-10-26T21:23:29.811445",
     "exception": false,
     "start_time": "2024-10-26T21:23:29.794977",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['data', 'target', 'frame', 'categories', 'feature_names', 'target_names', 'DESCR', 'details', 'url'])"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mnist.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0bdfe89d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:23:29.827707Z",
     "iopub.status.busy": "2024-10-26T21:23:29.826932Z",
     "iopub.status.idle": "2024-10-26T21:23:29.832204Z",
     "shell.execute_reply": "2024-10-26T21:23:29.831330Z"
    },
    "papermill": {
     "duration": 0.01545,
     "end_time": "2024-10-26T21:23:29.834641",
     "exception": false,
     "start_time": "2024-10-26T21:23:29.819191",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(70000, 784) (70000,)\n"
     ]
    }
   ],
   "source": [
    "X, y = mnist['data'], mnist['target']\n",
    "print(X.shape, y.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76e921f7",
   "metadata": {
    "papermill": {
     "duration": 0.006532,
     "end_time": "2024-10-26T21:23:29.847937",
     "exception": false,
     "start_time": "2024-10-26T21:23:29.841405",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "There are 70,000 images with 784 features (28x28 pixels)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c23cf564",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:23:29.863471Z",
     "iopub.status.busy": "2024-10-26T21:23:29.862619Z",
     "iopub.status.idle": "2024-10-26T21:23:29.985383Z",
     "shell.execute_reply": "2024-10-26T21:23:29.983977Z"
    },
    "papermill": {
     "duration": 0.134758,
     "end_time": "2024-10-26T21:23:29.989476",
     "exception": false,
     "start_time": "2024-10-26T21:23:29.854718",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'3'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Viewing one of the images\n",
    "%matplotlib inline\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "some_digit=X[30000]\n",
    "some_digit_image = some_digit.reshape(28, 28)\n",
    "plt.imshow(some_digit_image, cmap=matplotlib.cm.binary, interpolation='nearest')\n",
    "plt.axis('off')\n",
    "plt.show()\n",
    "\n",
    "y[30000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2d53bd94",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:23:30.022830Z",
     "iopub.status.busy": "2024-10-26T21:23:30.021163Z",
     "iopub.status.idle": "2024-10-26T21:23:30.029521Z",
     "shell.execute_reply": "2024-10-26T21:23:30.028151Z"
    },
    "papermill": {
     "duration": 0.028622,
     "end_time": "2024-10-26T21:23:30.033028",
     "exception": false,
     "start_time": "2024-10-26T21:23:30.004406",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# The dataset is already split into train and test as first 60,000 for train and the rest for test\n",
    "X_train, X_test, y_train, y_test = X[:60000], X[60000:], y[:60000], y[60000:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fe17a109",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:23:30.060170Z",
     "iopub.status.busy": "2024-10-26T21:23:30.059376Z",
     "iopub.status.idle": "2024-10-26T21:23:30.630237Z",
     "shell.execute_reply": "2024-10-26T21:23:30.629433Z"
    },
    "papermill": {
     "duration": 0.584334,
     "end_time": "2024-10-26T21:23:30.632664",
     "exception": false,
     "start_time": "2024-10-26T21:23:30.048330",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# We shuffle the train set so we get a spread of digits\n",
    "import numpy as np\n",
    "\n",
    "shuffle_index = np.random.permutation(60000)\n",
    "X_train, y_train = X_train[shuffle_index], y_train[shuffle_index]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7995b2f8",
   "metadata": {
    "papermill": {
     "duration": 0.00661,
     "end_time": "2024-10-26T21:23:30.646272",
     "exception": false,
     "start_time": "2024-10-26T21:23:30.639662",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Training a Binary Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8e08d719",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:23:30.661560Z",
     "iopub.status.busy": "2024-10-26T21:23:30.660859Z",
     "iopub.status.idle": "2024-10-26T21:23:30.668724Z",
     "shell.execute_reply": "2024-10-26T21:23:30.667837Z"
    },
    "papermill": {
     "duration": 0.017612,
     "end_time": "2024-10-26T21:23:30.670715",
     "exception": false,
     "start_time": "2024-10-26T21:23:30.653103",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Testing for 5 or not 5\n",
    "y_train_5 = (y_train == '5')\n",
    "y_test_5 = (y_test == '5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "46e7dcf0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:23:30.685696Z",
     "iopub.status.busy": "2024-10-26T21:23:30.685402Z",
     "iopub.status.idle": "2024-10-26T21:23:47.233546Z",
     "shell.execute_reply": "2024-10-26T21:23:47.232539Z"
    },
    "papermill": {
     "duration": 16.558305,
     "end_time": "2024-10-26T21:23:47.235860",
     "exception": false,
     "start_time": "2024-10-26T21:23:30.677555",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SGDClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SGDClassifier</label><div class=\"sk-toggleable__content\"><pre>SGDClassifier(random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "SGDClassifier(random_state=42)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Use a Stochastic Gradient Descent classifier and train on the whole training set\n",
    "from sklearn.linear_model import SGDClassifier\n",
    "\n",
    "sgd_clf = SGDClassifier(random_state=42)\n",
    "sgd_clf.fit(X_train, y_train_5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "239106b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:23:47.252024Z",
     "iopub.status.busy": "2024-10-26T21:23:47.251429Z",
     "iopub.status.idle": "2024-10-26T21:23:47.258371Z",
     "shell.execute_reply": "2024-10-26T21:23:47.257421Z"
    },
    "papermill": {
     "duration": 0.017132,
     "end_time": "2024-10-26T21:23:47.260279",
     "exception": false,
     "start_time": "2024-10-26T21:23:47.243147",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([False])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sgd_clf.predict([some_digit])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e971cc5a",
   "metadata": {
    "papermill": {
     "duration": 0.006954,
     "end_time": "2024-10-26T21:23:47.274617",
     "exception": false,
     "start_time": "2024-10-26T21:23:47.267663",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Performance Measures"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e9ccf3c6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:23:47.291211Z",
     "iopub.status.busy": "2024-10-26T21:23:47.290264Z",
     "iopub.status.idle": "2024-10-26T21:24:16.577712Z",
     "shell.execute_reply": "2024-10-26T21:24:16.576424Z"
    },
    "papermill": {
     "duration": 29.298384,
     "end_time": "2024-10-26T21:24:16.580309",
     "exception": false,
     "start_time": "2024-10-26T21:23:47.281925",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.9693 , 0.96065, 0.9618 ])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Evaluate the SGD Classifier with K-fold CV with 3 folds\n",
    "from sklearn.model_selection import cross_val_score\n",
    "cross_val_score(sgd_clf, X_train, y_train_5, cv=3, scoring='accuracy')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87443aa5",
   "metadata": {
    "papermill": {
     "duration": 0.015518,
     "end_time": "2024-10-26T21:24:16.603861",
     "exception": false,
     "start_time": "2024-10-26T21:24:16.588343",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "95% seems good accuracy, but lets check a dumb classifier which assigns every image as 'not 5'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4ae282ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:24:16.638855Z",
     "iopub.status.busy": "2024-10-26T21:24:16.637956Z",
     "iopub.status.idle": "2024-10-26T21:24:16.646673Z",
     "shell.execute_reply": "2024-10-26T21:24:16.645595Z"
    },
    "papermill": {
     "duration": 0.029284,
     "end_time": "2024-10-26T21:24:16.649855",
     "exception": false,
     "start_time": "2024-10-26T21:24:16.620571",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Dumb classifier model\n",
    "from sklearn.base import BaseEstimator\n",
    "\n",
    "class Never5Classifier(BaseEstimator):\n",
    "    def fit(self, X, y=None):\n",
    "        pass\n",
    "    def predict(self, X):\n",
    "        return np.zeros((len(X), 1), dtype=bool)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ebd06ffa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:24:16.683360Z",
     "iopub.status.busy": "2024-10-26T21:24:16.682808Z",
     "iopub.status.idle": "2024-10-26T21:24:17.046089Z",
     "shell.execute_reply": "2024-10-26T21:24:17.045131Z"
    },
    "papermill": {
     "duration": 0.382629,
     "end_time": "2024-10-26T21:24:17.048423",
     "exception": false,
     "start_time": "2024-10-26T21:24:16.665794",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.909  , 0.91045, 0.9095 ])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Testing the model's accuracy\n",
    "never_5_clf = Never5Classifier()\n",
    "cross_val_score(never_5_clf, X_train, y_train_5, cv=3, scoring='accuracy')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "141a21c6",
   "metadata": {
    "papermill": {
     "duration": 0.007357,
     "end_time": "2024-10-26T21:24:17.063654",
     "exception": false,
     "start_time": "2024-10-26T21:24:17.056297",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Gives 90% accuracy as only about 10% of the images are '5's"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "5b2c06dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:24:17.081230Z",
     "iopub.status.busy": "2024-10-26T21:24:17.080336Z",
     "iopub.status.idle": "2024-10-26T21:24:46.381485Z",
     "shell.execute_reply": "2024-10-26T21:24:46.379908Z"
    },
    "papermill": {
     "duration": 29.314218,
     "end_time": "2024-10-26T21:24:46.385639",
     "exception": false,
     "start_time": "2024-10-26T21:24:17.071421",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# cross_val_predict returns the predictions made on each test fold\n",
    "from sklearn.model_selection import cross_val_predict\n",
    "\n",
    "y_train_pred = cross_val_predict(sgd_clf, X_train, y_train_5, cv=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "55bfdffb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:24:46.421452Z",
     "iopub.status.busy": "2024-10-26T21:24:46.420838Z",
     "iopub.status.idle": "2024-10-26T21:24:46.448365Z",
     "shell.execute_reply": "2024-10-26T21:24:46.447090Z"
    },
    "papermill": {
     "duration": 0.048922,
     "end_time": "2024-10-26T21:24:46.451577",
     "exception": false,
     "start_time": "2024-10-26T21:24:46.402655",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[53595,   984],\n",
       "       [ 1181,  4240]])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Now we can produce a confusion matrix\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "confusion_matrix(y_train_5, y_train_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "205dd5f0",
   "metadata": {
    "papermill": {
     "duration": 0.015238,
     "end_time": "2024-10-26T21:24:46.482897",
     "exception": false,
     "start_time": "2024-10-26T21:24:46.467659",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Non-5 on the top row, so 54237 correctly identified as not 5, and 3682 correctly idenitified as 5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "007fd38d",
   "metadata": {
    "papermill": {
     "duration": 0.012356,
     "end_time": "2024-10-26T21:24:46.510866",
     "exception": false,
     "start_time": "2024-10-26T21:24:46.498510",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Precision and Recall**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "247558ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:24:46.527976Z",
     "iopub.status.busy": "2024-10-26T21:24:46.527150Z",
     "iopub.status.idle": "2024-10-26T21:24:46.555128Z",
     "shell.execute_reply": "2024-10-26T21:24:46.554250Z"
    },
    "papermill": {
     "duration": 0.039,
     "end_time": "2024-10-26T21:24:46.557346",
     "exception": false,
     "start_time": "2024-10-26T21:24:46.518346",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8116385911179173"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculating the precision and recall\n",
    "from sklearn.metrics import precision_score, recall_score\n",
    "\n",
    "precision_score(y_train_5, y_train_pred)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ce7219a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:24:46.575268Z",
     "iopub.status.busy": "2024-10-26T21:24:46.574404Z",
     "iopub.status.idle": "2024-10-26T21:24:46.601061Z",
     "shell.execute_reply": "2024-10-26T21:24:46.600152Z"
    },
    "papermill": {
     "duration": 0.03791,
     "end_time": "2024-10-26T21:24:46.603233",
     "exception": false,
     "start_time": "2024-10-26T21:24:46.565323",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7821435159564656"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "recall_score(y_train_5, y_train_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "459c6769",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-26T21:24:46.621199Z",
     "iopub.status.busy": "2024-10-26T21:24:46.620450Z",
     "iopub.status.idle": "2024-10-26T21:24:46.647370Z",
     "shell.execute_reply": "2024-10-26T21:24:46.646411Z"
    },
    "papermill": {
     "duration": 0.038161,
     "end_time": "2024-10-26T21:24:46.649461",
     "exception": false,
     "start_time": "2024-10-26T21:24:46.611300",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.796618130577736"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Compute the F_1 score\n",
    "from sklearn.metrics import f1_score\n",
    "f1_score(y_train_5, y_train_pred)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 30775,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 122.909077,
   "end_time": "2024-10-26T21:24:47.076532",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-10-26T21:22:44.167455",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
