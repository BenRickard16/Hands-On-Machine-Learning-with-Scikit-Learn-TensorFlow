{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# MNIST Handwriting Classification\n","metadata":{}},{"cell_type":"code","source":"# Downloading the MNIST dataset\nfrom sklearn.datasets import fetch_openml\nmnist = fetch_openml('mnist_784', as_frame=False)","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-30T14:10:04.727677Z","iopub.execute_input":"2024-09-30T14:10:04.728538Z","iopub.status.idle":"2024-09-30T14:10:28.021770Z","shell.execute_reply.started":"2024-09-30T14:10:04.728493Z","shell.execute_reply":"2024-09-30T14:10:28.020584Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/datasets/_openml.py:968: FutureWarning: The default value of `parser` will change from `'liac-arff'` to `'auto'` in 1.4. You can set `parser='auto'` to silence this warning. Therefore, an `ImportError` will be raised from 1.4 if the dataset is dense and pandas is not installed. Note that the pandas parser may return different data types. See the Notes Section in fetch_openml's API doc for details.\n  warn(\n","output_type":"stream"}]},{"cell_type":"code","source":"mnist.keys()","metadata":{"execution":{"iopub.status.busy":"2024-09-30T14:10:41.152206Z","iopub.execute_input":"2024-09-30T14:10:41.152623Z","iopub.status.idle":"2024-09-30T14:10:41.159460Z","shell.execute_reply.started":"2024-09-30T14:10:41.152582Z","shell.execute_reply":"2024-09-30T14:10:41.158340Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"dict_keys(['data', 'target', 'frame', 'categories', 'feature_names', 'target_names', 'DESCR', 'details', 'url'])"},"metadata":{}}]},{"cell_type":"code","source":"X, y = mnist['data'], mnist['target']\nprint(X.shape, y.shape)","metadata":{"execution":{"iopub.status.busy":"2024-09-30T14:11:25.146106Z","iopub.execute_input":"2024-09-30T14:11:25.146505Z","iopub.status.idle":"2024-09-30T14:11:25.152047Z","shell.execute_reply.started":"2024-09-30T14:11:25.146467Z","shell.execute_reply":"2024-09-30T14:11:25.150862Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"(70000, 784) (70000,)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"There are 70,000 images with 784 features (28x28 pixels)\n","metadata":{}},{"cell_type":"code","source":"# Viewing one of the images\n%matplotlib inline\nimport matplotlib\nimport matplotlib.pyplot as plt\n\nsome_digit=X[30000]\nsome_digit_image = some_digit.reshape(28, 28)\nplt.imshow(some_digit_image, cmap=matplotlib.cm.binary, interpolation='nearest')\nplt.axis('off')\nplt.show()\n\ny[30000]","metadata":{"execution":{"iopub.status.busy":"2024-09-30T14:15:04.355028Z","iopub.execute_input":"2024-09-30T14:15:04.355879Z","iopub.status.idle":"2024-09-30T14:15:04.440106Z","shell.execute_reply.started":"2024-09-30T14:15:04.355837Z","shell.execute_reply":"2024-09-30T14:15:04.438819Z"},"trusted":true},"execution_count":17,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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"},"metadata":{}},{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"'3'"},"metadata":{}}]},{"cell_type":"code","source":"# The dataset is already split into train and test as first 60,000 for train and the rest for test\nX_train, X_test, y_train, y_test = X[:60000], X[60000:], y[:60000], y[60000:]","metadata":{"execution":{"iopub.status.busy":"2024-09-30T14:16:22.231423Z","iopub.execute_input":"2024-09-30T14:16:22.231832Z","iopub.status.idle":"2024-09-30T14:16:22.237272Z","shell.execute_reply.started":"2024-09-30T14:16:22.231778Z","shell.execute_reply":"2024-09-30T14:16:22.236048Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"# We shuffle the train set so we get a spread of digits\nimport numpy as np\n\nshuffle_index = np.random.permutation(60000)\nX_train, y_train = X_train[shuffle_index], y_train[shuffle_index]","metadata":{"execution":{"iopub.status.busy":"2024-09-30T14:17:44.136247Z","iopub.execute_input":"2024-09-30T14:17:44.136666Z","iopub.status.idle":"2024-09-30T14:17:44.759402Z","shell.execute_reply.started":"2024-09-30T14:17:44.136626Z","shell.execute_reply":"2024-09-30T14:17:44.758389Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"markdown","source":"# Training a Binary Classifier","metadata":{}},{"cell_type":"code","source":"# Testing for 5 or not 5\ny_train_5 = (y_train == '5')\ny_test_5 = (y_test == '5')","metadata":{"execution":{"iopub.status.busy":"2024-09-30T14:26:03.073616Z","iopub.execute_input":"2024-09-30T14:26:03.074055Z","iopub.status.idle":"2024-09-30T14:26:03.080751Z","shell.execute_reply.started":"2024-09-30T14:26:03.074012Z","shell.execute_reply":"2024-09-30T14:26:03.079719Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"# Use a Stochastic Gradient Descent classifier and train on the whole training set\nfrom sklearn.linear_model import SGDClassifier\n\nsgd_clf = SGDClassifier(random_state=42)\nsgd_clf.fit(X_train, y_train_5)","metadata":{"execution":{"iopub.status.busy":"2024-09-30T14:26:04.208084Z","iopub.execute_input":"2024-09-30T14:26:04.208473Z","iopub.status.idle":"2024-09-30T14:26:23.035225Z","shell.execute_reply.started":"2024-09-30T14:26:04.208438Z","shell.execute_reply":"2024-09-30T14:26:23.034191Z"},"trusted":true},"execution_count":34,"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"SGDClassifier(random_state=42)","text/html":"<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SGDClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SGDClassifier</label><div class=\"sk-toggleable__content\"><pre>SGDClassifier(random_state=42)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"sgd_clf.predict([some_digit])","metadata":{"execution":{"iopub.status.busy":"2024-09-30T14:27:07.769447Z","iopub.execute_input":"2024-09-30T14:27:07.769928Z","iopub.status.idle":"2024-09-30T14:27:07.777895Z","shell.execute_reply.started":"2024-09-30T14:27:07.769878Z","shell.execute_reply":"2024-09-30T14:27:07.776751Z"},"trusted":true},"execution_count":35,"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"array([False])"},"metadata":{}}]}]}